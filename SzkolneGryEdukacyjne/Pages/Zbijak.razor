@page "/zbijak"
@using Szachy
@using System.IO
@using Helpers
@using System.Text.RegularExpressions
@inject PiecesHelper PiecesHelper
@using System.Net.Http
@inject HttpClient Http
@inject IJSRuntime js;


@if (!ShowPopup)
{
    <h3>Wskaż zaatakowane bierki</h3>

    <table class="szachownica">
        <tbody>
            @for (int rzad = 1; rzad < 9; rzad++)
            {
                <tr class="rzad">
                    @for (int kolumna = 1; kolumna < 9; kolumna++)
                    {
                        var bierka = zbijak.szachownica.GetPole(rzad, kolumna).Bierka;
                        var klasaKoloru = zbijak.szachownica.GetPole(rzad, kolumna).Kolor == Kolor.Bialy ? "bialy" : "czarny";
                        var podglad = zbijak.bierkiZaznaczone.Contains(bierka) ? "podglad" : "";
                        var zaznaczenie = zbijak.atakiZnalezione.Contains(bierka) ? "zaznaczenie" : "";
                        <td class="pole @klasaKoloru @podglad @zaznaczenie">
                            @if (bierka != null)
                            {
                                <img class="pole" src="@PiecesHelper.GetImageSrc(bierka)" @onclick="() => Kliknieto(bierka)" @onmousedown="args => PrzycisnietoFigure(bierka, args)" @onmouseup="args => PuszczonoFigure(bierka, args)" />
                            }
                            else
                            {
                            <span>&nbsp;</span>
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>

    <div class="podszachownica">
        <div>
        <div class="float-left w-50">
           <h3> Zostało: <b>@zbijak.atakiDoZnalezienia.Except(zbijak.atakiZnalezione).Count()</b> </h3>
           <p>Ustawień: <span class="dobrze"><b>@zbijak.RundaZadania</b></span> Poprawnie: <span class="dobrze"><b>@zbijak.RundaDobre</b></span> Błędy: <span class="blednie"><b>@zbijak.RundaBledy</b></span> Punkty: <b>@zbijak.RundaPunkty</b></p>
         </div>
        <div class="float-right w-50">
            <h3 class="text-right"><span class="@(timeValue < new TimeSpan(0,1,0) ? "koniecCzasu" : "")"><b>@(timeValue.ToString(@"mm\:ss"))</b></span></h3>            
            <button class="btn btn-primary mt-3 float-right" @onclick="dajNastepne">@Zaczynamy</button>
        </div>
        </div>
        <div class="float-left">
            <p class="float-left w-50" type="text" >Twoje imię: </p>
            <input class="float-right w-50" @bind="Name" type="text"/>
        </div>

        <div class="w-100"></div>
        
        <div class="float-left w-50">
                    <h4>Najlepsze:  </h4>
                    @foreach (var wynik in wyniki)
                    {
                        <p>@wynik</p>
                    }
        </div>

        <div class="float-right  w-50">
                    <h4>Ten tydzień:  </h4>
                    @foreach (var wynik in wynikiTygodnia)
                    {
                        <p>@wynik</p>
                    }
        </div>

        <div class="w-100"></div>


        <div class="float-left  w-50">
            <h4>Osobiste:  </h4>
            @foreach (var wynik in osobiste)
            {
                <p>@wynik</p>
            }
        </div>
        
    </div>
}
else
{
<div class="szachownica">
        <h3>Punkty: <b>@zbijak.RundaPunkty</b> </h3>
        
        <p>Ustawień: <span class="dobrze"><b>@zbijak.RundaZadania</b></span> </p><p>Poprawnie: <span class="dobrze"><b>@zbijak.RundaDobre</b></span></p><p> Błędy: <span class="blednie"><b>@zbijak.RundaBledy</b></span></p>
    <button class="btn btn-primary mt-3" @onclick="dajNastepne">Jeszcze raz</button>

        <div class="w-100"></div>

        <div class="float-left w-50">
            <h4>Najlepsze:  </h4>
            @foreach (var wynik in wyniki)
            {
                <p>@wynik</p>
            }
        </div>

        <div class="float-right  w-50">
            <h4>Ten tydzień:  </h4>
            @foreach (var wynik in wynikiTygodnia)
            {
                <p>@wynik</p>
            }
        </div>

        <div class="w-100"></div>


        <div class="float-left  w-50">
            <h4>Osobiste:  </h4>
            @foreach (var wynik in osobiste)
            {
                <p>@wynik</p>
            }
        </div>
</div>

    
}





@code {
    private System.Threading.Timer _timer;
    private DateTime startTime;


    Szachy.Treningi.Zbijak zbijak = new Szachy.Treningi.Zbijak();
    static int timeForRound = 3;//in minutes
    TimeSpan timeValue = new TimeSpan(0, timeForRound, 0);
    string Zaczynamy = "Zaczynamy";
    private string Name { get; set; } = "";

    public IEnumerable<string> wyniki = new List<string>();
    public IEnumerable<string> wynikiTygodnia = new List<string>();
    public IEnumerable<string> osobiste = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        OdswierzRekordy();
        Regex fenRegex = new Regex(@"([rnbqkpRNBQKP1-8]+\/){7}[rnbqkpRNBQKP1-8]+");
        var fensResponse = await Http.GetStringAsync("FENs/MateIn4.json");
        var fens = fensResponse.Split("\r\n").Where(d => fenRegex.IsMatch(d)).ToArray();
        zbijak = new Szachy.Treningi.Zbijak(fens);
    }

    private void PrzycisnietoFigure(Bierka b, MouseEventArgs mouseEventArgs)
    {

        if (mouseEventArgs.Button == 2) // prawy klawisz
        {
            zbijak.PokazBierkiZaatakoanePrzez(b);
        }
    }

    private void PuszczonoFigure(Bierka b, MouseEventArgs mouseEventArgs)
    {
        if (mouseEventArgs.Button == 2) // prawy klawisz
        {
            zbijak.SchowajBierkiZaatakowane();
        }
    }

    private async void dajNastepne(MouseEventArgs mouseEventArgs)
    {
        Zaczynamy = "Od nowa";

        ShowPopup = false;
        zbijak.NastepnaRunda();

        await js.InvokeVoidAsync("PlayAudioFile", "/sounds/start.wav");

        timeValue = new TimeSpan(0, timeForRound, 0);
        Start();
    }

    private async void Kliknieto(Bierka b)
    {
        if (zbijak.WskazanoBierke(b))
        {
            await js.InvokeVoidAsync("PlayAudioFile", "/sounds/success.mp3");
        }
        else
        {
            await js.InvokeVoidAsync("PlayAudioFile", "/sounds/failure.wav");
        }
    }

    async Task StopWatch()
    {

        timeValue = new TimeSpan(0, timeForRound, 0).Subtract(DateTime.Now - this.startTime);
        await InvokeAsync(StateHasChanged);

        if (timeValue.Ticks <= 0)
        {
            await InvokeAsync(Stop);
            await InvokeAsync(PodsumujRunde);
            await js.InvokeVoidAsync("PlayAudioFile", "/sounds/trumpets.mp3");
        }
    }

    public void Start()
    {
        Stop();
        OdswierzRekordy();
        this.startTime = DateTime.Now;
        _timer = new System.Threading.Timer(async _ =>
        {
            await StopWatch();

        }, null, 0, 1000);
    }

    public void Stop()
    {
        _timer?.Dispose();
        _timer = null;
    }

    bool ShowPopup = false;
    private void PodsumujRunde()
    {

        ShowPopup = true;
        var filePath = "rekordy_tygodnia.txt";

        if (File.Exists(filePath))
        {
            // Get the last write time of the file
            DateTime lastModified = File.GetCreationTime(filePath);

            // Check if the file is older than a week
            if ((DateTime.Now - lastModified).TotalDays > 7)
            {
                try
                {
                    File.Delete(filePath);
                    Console.WriteLine("File deleted successfully.");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error deleting file: {ex.Message}");
                }
            }
        }

        File.AppendAllText("rekordy.txt", $"\n{zbijak.RundaPunkty} {Name}");
        File.AppendAllText("rekordy_tygodnia.txt", $"\n{zbijak.RundaPunkty} {Name}");
        OdswierzRekordy();
    }

    private void OdswierzRekordy()
    {
        var lines = File.Exists("rekordy.txt") ? File.ReadAllLines("rekordy.txt") : new string[0];
        wyniki = lines.Where(n => !String.IsNullOrWhiteSpace(n)).OrderByDescending(d => int.Parse(d.Split(" ")[0])).Take(5);
        osobiste = lines.Where(n => !String.IsNullOrWhiteSpace(n))
        .GroupBy(d => d.Split(" ").Count() > 1 ? d.Split(" ")[1] : "")
        .Select(group => new
        {
            Name = group.Key,
            BestResult = group.Max(el => int.Parse(el.Split(" ")[0]))  // Get the best (max) result per person

        })
        .OrderByDescending(d => d.BestResult).Select(el => $"{el.BestResult} {el.Name}");
        lines = File.Exists("rekordy_tygodnia.txt") ? File.ReadAllLines("rekordy_tygodnia.txt") : new string[0];
        wynikiTygodnia = lines.Where(n => !String.IsNullOrWhiteSpace(n)).OrderByDescending(d => int.Parse(d.Split(" ")[0])).Take(5);
        StateHasChanged();
    }
}


